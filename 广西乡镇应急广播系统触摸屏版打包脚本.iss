; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#define MyAppName "TownsEBMSystem"
#define MyAppNameEn "TownsEBMSystem"
#define MyAppVersion "1.0.0.5"
#define MyAppPublisher "Tuners"
#define MyAppExeName "TownsEBMSystem.exe"
#define MyAppLoggingName "Tuners"
#define MyAppLoggedName "Tuners"
#define DebugSourcePath "..\..\TownsEBMSystem\TownsEBMSystem\bin\x86\Debug"
#define ReleaseSourcePath "..\..\TownsEBMSystem\TownsEBMSystem\bin\x86\Debug"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{7B3E3DE8-8FF3-4D57-B94A-525D48E62929}
AppName=" {#MyAppName} [{#MyAppVersion}] "
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppNameEn}
DefaultGroupName=广西县级应急广播系统
DisableProgramGroupPage=yes
OutputDir=..\..\setup
OutputBaseFilename="{#MyAppName}{#MyAppVersion}"
Compression=lzma
SolidCompression=yes

[Languages]

; 默认安装包打包出来是英文版，并且没有中文视图，需要自己添加

Name: "Chinese"; MessagesFile: "compiler:Languages/ChineseSimplified.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkablealone; Languages: Chinese
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkablealone; Languages: Chinese

[Files]
Source: "{#ReleaseSourcePath}\TownsEBMSystem.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#ReleaseSourcePath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirsSource: "..\..\打包环境\Framework\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Run]
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
;Filename: "{app}\{#RegGridPPBatName}"; Description: "{cm:LaunchProgram,{#StringChange(RegGridPPName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[Messages]  
BeveledLabel={#MyAppPublisher}
ConfirmUninstall="您真的想要从电脑中卸载{#MyAppName}吗?%n%n按【是】则完全删除 %1 以及它的所有组件;%n按 【否】则让软件继续留在您的电脑上. "

[Registry]  
Root: HKLM ;SubKey:"Software\{#MyAppName}";ValueType:dword;ValueName:config;ValueData:10 ;Flags:uninsdeletevalue  


;在执行脚本  
[code]  

//全局变量
var
ErrorCode,IsRunning: Integer;
const WM_CLOSE=$0010;


// 程序是否运行或在登录中
function GetLogedOrLoggingWindow() : Integer;
begin
  result:=FindWindowByWindowName('{#MyAppLoggedName}');
  if(result = 0) then
  begin
    result:=FindWindowByWindowName('{#MyAppLoggingName}');  
  end;
end;


function CheckDotNet4_0():boolean; 
begin 
Result:=not RegKeyExists(HKLM, 'SOFTWARE\Microsoft\.NETFramework\policy\v4.0'); 
end; 


// 检测.net framework 4.0安装环境，并安装.net框架
function CheckDotNetFrameWork() : Boolean;
var Path:string; 
        ResultCode: Integer; 
begin 
    if CheckDotNet4_0() then 
    begin 
       // ExtractTemporaryFile('Microsoft.NET.exe'); 
        Exec(ExpandConstant('{tmp}\Microsoft.NET.exe'), '', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode); 
    end; 
end;




// 卸载之前的安装版本
function UnInstallBefore() : Integer;
var ResultCode : Integer;
UnInstallFile : String;
begin
    ResultCode:=-1;
    UnInstallFile:=''
    RegQueryStringValue(HKLM, 'SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{A6A7578-84EC-4006-8226-C87D71FB94}_is1', 'UninstallString', UnInstallFile);
    StringChangeEx(UnInstallFile, '"', '', True);
    if(FileExists(UnInstallFile)) then begin
        Exec(UnInstallFile, '/norestart', ExtractFilePath(UnInstallFile), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end;

    Result :=ResultCode;
end;
   
//判断程序是否存在  
//初始化程序事件   
function InitializeSetup() : Boolean;
begin  
    Result :=true; //安装程序继续  
    IsRunning:=GetLogedOrLoggingWindow()
    while IsRunning<>0 do
    begin  
        if Msgbox('系统检测到客户端正在运行，请确认是否关闭？' #13#13 '单击【是】自动关闭客户端并继续安装，【否】退出安装！', mbConfirmation, MB_YESNO) = idNO then begin  
            Result :=false; //安装程序退出  
            IsRunning :=0;
            exit;
        end
        else begin
            SendMessage(IsRunning,WM_CLOSE,0,0); // 关闭进程
            Result :=true; // 安装程序继续
            IsRunning:=GetLogedOrLoggingWindow()
        end;
    end;
    // 检查是否已经安装过应用程序
    if RegValueExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\{#MyAppName}', 'config') then begin
        if Msgbox('客户端已安装过，是否卸载重装？' #13#13 '单击【是】卸载并重装，【否】退出安装！', mbConfirmation, MB_YESNO) = idYES then begin
            UnInstallBefore();
            Result :=true; //安装程序继续  
        end  
        else begin
            Result :=false; //安装程序退出  
            IsRunning :=0;  
        end
    end
    else begin
        Result :=CheckDotNetFrameWork(); //安装程序继续  
        IsRunning:=GetLogedOrLoggingWindow();  
    end;
end;  

// 卸载时判断客户端是否正在运行  
function InitializeUninstall() : Boolean;  
begin  
    Result :=true; //安装程序继续
    IsRunning:=GetLogedOrLoggingWindow();  
    while IsRunning<>0 do  
    begin  
        if Msgbox('系统检测到客户端正在运行，请确认是否关闭？' #13#13 '单击【是】自动关闭客户端并继续卸载，【否】退出！', mbConfirmation, MB_YESNO) = idNO then begin  
            Result :=false; //安装程序退出  
            IsRunning :=0;  
        end
        else begin
            SendMessage(IsRunning,WM_CLOSE,0,0);
            Result :=true; //安装程序继续  
            IsRunning:=GetLogedOrLoggingWindow();  
        end;  
    end;  
end;  